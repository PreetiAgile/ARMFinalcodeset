// <auto-generated />
using System;
using System.Collections.Generic;
using ARMCommon.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ARMCommon.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ARMCommon.Model.ARMApp", b =>
                {
                    b.Property<string>("AppName")
                        .HasColumnType("text");

                    b.Property<string>("AppColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppLogo")
                        .HasColumnType("text");

                    b.Property<string>("AppTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AxpertAppName")
                        .HasColumnType("text");

                    b.Property<string>("AxpertScriptsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AxpertWebUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConnectionName")
                        .HasColumnType("text");

                    b.Property<string>("DBVersion")
                        .HasColumnType("text");

                    b.Property<string>("DataBase")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFingerPrint")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablefacialRecognition")
                        .HasColumnType("boolean");

                    b.Property<bool>("ForceLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("ForceLoginDays")
                        .HasColumnType("text");

                    b.Property<bool>("IsCitizenUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeoFencing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGeoTagging")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text");

                    b.Property<string>("RedisIP")
                        .HasColumnType("text");

                    b.Property<string>("RedisPassword")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("AppName");

                    b.ToTable("ARMApps");
                });

            modelBuilder.Entity("ARMCommon.Model.ARMDataSource", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ARMDataSourceID")
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowAnonymousAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataSourceDesc")
                        .HasColumnType("text");

                    b.Property<string>("DataSourceFormat")
                        .HasColumnType("text");

                    b.Property<string>("DataSourceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataSourceURL")
                        .HasColumnType("text");

                    b.Property<string>("DataSyncAPIList")
                        .HasColumnType("text");

                    b.Property<string>("DataSyncInitFormat")
                        .HasColumnType("text");

                    b.Property<int?>("DataSyncInterval")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDataSyncActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMasterData")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSyncedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestType")
                        .HasColumnType("text");

                    b.Property<string>("SQLScript")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<Guid>>("selectedDataSyncDataSources")
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("selectedUserGroups")
                        .HasColumnType("uuid[]");

                    b.HasKey("ID");

                    b.HasIndex("ARMDataSourceID");

                    b.ToTable("ARMDataSources");
                });

            modelBuilder.Entity("ARMCommon.Model.ARMHtml", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowAnonymousAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataSource")
                        .HasColumnType("text");

                    b.Property<string[]>("DataSources")
                        .HasColumnType("text[]");

                    b.Property<string>("DefinitionHTML")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefinitionID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<Guid>>("selectedUserGroups")
                        .HasColumnType("uuid[]");

                    b.HasKey("ID");

                    b.ToTable("ARMDefinations");
                });

            modelBuilder.Entity("ARMCommon.Model.ARMNotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplate");
                });

            modelBuilder.Entity("ARMCommon.Model.ARMPageData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("createddatetime")
                        .HasColumnType("text");

                    b.Property<string>("formmodule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("formname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("formsubmodule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("keyvalue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("paneldata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PatientRegistration");
                });

            modelBuilder.Entity("ARMCommon.Model.ARMUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("activatedon")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActivatedOn");

                    b.Property<string>("appname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AppName");

                    b.Property<string>("email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<DateTime?>("insertedon")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("InsertedOn");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<string>("mobileno")
                        .HasColumnType("text")
                        .HasColumnName("MobileNo");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<string>("usergroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserGroup");

                    b.Property<Guid>("usergroupid")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupId");

                    b.Property<string>("username")
                        .HasColumnType("text")
                        .HasColumnName("UserName");

                    b.HasKey("ID");

                    b.ToTable("ARMUsers", (string)null);
                });

            modelBuilder.Entity("ARMCommon.Model.ARMUserGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupType")
                        .HasColumnType("text");

                    b.Property<string>("InternalAuthMethod")
                        .HasColumnType("text");

                    b.Property<string>("InternalAuthRequest")
                        .HasColumnType("text");

                    b.Property<string>("InternalAuthResponse")
                        .HasColumnType("text");

                    b.Property<string>("InternalAuthUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.HasKey("ID");

                    b.ToTable("ARMUserGroups");
                });

            modelBuilder.Entity("ARMCommon.Model.AxInlineForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AcessControl")
                        .HasColumnType("text[]");

                    b.Property<bool>("AddQuickAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("AutoSend")
                        .HasColumnType("text");

                    b.Property<string>("AutoSendCondition")
                        .HasColumnType("text");

                    b.Property<string>("ButtonCaption")
                        .HasColumnType("text");

                    b.Property<string>("ButtonIcon")
                        .HasColumnType("text");

                    b.Property<string>("ButtonScript")
                        .HasColumnType("text");

                    b.Property<string>("Compuations")
                        .HasColumnType("text");

                    b.Property<bool>("EnableSend")
                        .HasColumnType("boolean");

                    b.Property<string>("FormCreatedOn")
                        .HasColumnType("text");

                    b.Property<string>("FormCreator")
                        .HasColumnType("text");

                    b.Property<string>("FormText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormUpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FormUpdatedOn")
                        .HasColumnType("text");

                    b.Property<string>("FormValidations")
                        .HasColumnType("text");

                    b.Property<List<string>>("HideInMyList")
                        .HasColumnType("text[]");

                    b.Property<string>("Module")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueueName")
                        .HasColumnType("text");

                    b.Property<List<string>>("SelectedSendOnlyTo")
                        .HasColumnType("text[]");

                    b.Property<string>("StatusValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModule")
                        .HasColumnType("text");

                    b.Property<string>("appName")
                        .HasColumnType("text");

                    b.Property<string>("formIcon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AxInLineForm");
                });

            modelBuilder.Entity("ARMCommon.Model.AxModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("appName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AxModules");
                });

            modelBuilder.Entity("ARMCommon.Model.AxModulePages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AcessControl")
                        .HasColumnType("text[]");

                    b.Property<bool>("AddQuickAccess")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Forms")
                        .HasColumnType("text[]");

                    b.Property<string>("KeyField")
                        .HasColumnType("text");

                    b.Property<string>("Module")
                        .HasColumnType("text");

                    b.Property<string>("PageDataTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PageIcon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PageOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModule")
                        .HasColumnType("text");

                    b.Property<string>("appName")
                        .HasColumnType("text");

                    b.Property<string>("formdata")
                        .HasColumnType("text");

                    b.Property<bool>("navigation")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("AxModulePages");
                });

            modelBuilder.Entity("ARMCommon.Model.AxpertUsers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobileNo")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("AxpertUsers");
                });

            modelBuilder.Entity("ARMCommon.Model.AxSubModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubModuleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("appName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AxSubModules");
                });

            modelBuilder.Entity("ARMCommon.Model.UserDevice", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("appname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("deviceid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ARMUserDevices");
                });

            modelBuilder.Entity("ARMCommon.Model.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ARMSignInUsers");
                });

            modelBuilder.Entity("ARMCommon.Model.ARMDataSource", b =>
                {
                    b.HasOne("ARMCommon.Model.ARMDataSource", null)
                        .WithMany("DataSyncDataSources")
                        .HasForeignKey("ARMDataSourceID");
                });

            modelBuilder.Entity("ARMCommon.Model.ARMDataSource", b =>
                {
                    b.Navigation("DataSyncDataSources");
                });
#pragma warning restore 612, 618
        }
    }
}
